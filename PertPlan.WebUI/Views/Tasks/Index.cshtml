@using PertPlan.WebUI.Models.ViewModels;
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = "Tasks";
}

@model List<ProjectTask>
@{
}
@section Styles {
    <link rel="stylesheet" href="~/css/Tasks.css" asp-append-version="true" />
}

<div class="d-md-none" style="padding: 10px">
    <p>@Localizer["numberIndex"] - @Localizer["task's number"]</p>
    <p>@Localizer["nameIndex"] - @Localizer["task's name"]</p>
    <p>@Localizer["finishTimeIndex"] - @Localizer["time to finish task"]</p>
    <p>@Localizer["positiveTimeIndex"] - @Localizer["positive time to finish task"]</p>
    <p>@Localizer["averageTimeIndex"] - @Localizer["averate time to finish task"]</p>
    <p>@Localizer["negativeTimeIndex"] - @Localizer["negative time to finish task"]</p>
    <p>@Localizer["previousTasksIndex"] - @Localizer["previous tasks small"]</p>
</div>

<form asp-action="Index" method="post" id="createGraphForm">
    <div class="table-responsive">
        <table id="myTable" class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th id="moveIcon" rowspan="2" class=""></th>
                    <th id="number" rowspan="2" class="tableHeader-number">@Localizer["Number"]</th>
                    <th id="name" rowspan="2" class="tableHeader-text">@Localizer["Name"]</th>
                    <th id="finishTime" colspan="3">@Localizer["Finish time"]</th>
                    <th id="dependencies" rowspan="2" title=@Localizer["Numbers of previous tasks."] class="tableHeader-text">@Localizer["Previous tasks"]</th>
                </tr>
                <tr>
                    <th id="finishTimePositive">@Localizer["Positive"]</th>
                    <th id="finishTimeAverage">@Localizer["Average"]</th>
                    <th id="finishTimeNegative">@Localizer["Negative"]</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model?.Count; i++)
                {
                    <tr id="@Model[i].Id" class="table-row">
                        <td class="dndCell" draggable="true">
                            <div class="threeDotsIcon">^</div>
                        </td>
                        <td>
                            <div type="text" class="form-control tableCell taskNumberInput" readonly>@i</div>
                        </td>
                        <td>
                            <input type="text" class="form-control tableCell taskNameInput" name="[@i].Name" required maxlength="100" value="@Model[i].Name">
                        </td>
                        <td>
                            <input type="number" class="form-control tableCell taskPositiveTimeInput" name="[@i].PositiveFinishTime" required step="0.5" min="0.5" max="999" value="@Model[i].PositiveFinishTime">
                        </td>
                        <td>
                            <input type="number" class="form-control tableCell taskAverageTimeInput" name="[@i].AverageFinishTime" required step="0.5" min="0.5" max="999" value="@Model[i].AverageFinishTime">
                        </td>
                        <td>
                            <input type="number" class="form-control tableCell taskNegativeTimeInput" name="[@i].NegativeFinishTime" required step="0.5" min="0.5" max="999" value="@Model[i].NegativeFinishTime">
                        </td>
                        <td>
                            <input type="text" class="form-control tableCell taskDependentTasks" placeholder="1, 2, 3..." name="[@i].DependOnTasks" value="@Model[i].DependOnTasks">
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3" class="drpad dropZone"></td>
                    </tr>
                    <!-- Rows will be dynamically added here -->
                }
            </tbody>
        </table>
    </div>
    <div class="border tasksMenu">
        <div>
            <button class="btn btn-success m-1" id="addTaskButton" type="button">@Localizer["Add row"]</button>
            <button class="btn btn-success m-1" id="insertTaskButton" type="button" disabled>@Localizer["Insert row"]</button>
            <button class="btn btn-danger m-1" id="deleteLastTaskButton" type="button" disabled>@Localizer["Delete last row"]</button>
            <button class="btn btn-danger m-1" id="deleteSelectedTaskButton" type="button" disabled>@Localizer["Delete selected row"]</button>
        </div>
        <div>
            <button class="btn btn-primary m-1" id="submitButton" type="submit">@Localizer["Create diagram"]</button>
        </div>
    </div>
</form>

@section Scripts {
    <script src="~/js/Tasks.js" type="module" charset="utf-8"></script>
    <script src="~/js/TasksDND.js" type="module" charset="utf-8"></script>
    <script>
        const localizer = {
            selfDependencyError: @Json.Serialize(Localizer["Task can not depend on itself."].Value),
            undefinedTaskError: @Json.Serialize(Localizer["Task can not depend on undefined task."].Value),
            negativeNumberError: @Json.Serialize(Localizer["Task can not have negative number."].Value),
            dependencyFormatError: @Json.Serialize(Localizer["Field contains incorrect data."].Value),
            negativeTimeError: @Json.Serialize(Localizer["Negative finish time can not be shorter than average."].Value),
            averageTimeTooShortError: @Json.Serialize(Localizer["Average finish time can not be shorter than positive."].Value),
            averageTimeTooLongError: @Json.Serialize(Localizer["Average finish time can not be longer than negative."].Value),
            blankSpacesError: @Json.Serialize(Localizer["Task name can not contain only spaces."].Value),
            number: @Json.Serialize(Localizer["Number"].Value),
            name: @Json.Serialize(Localizer["Name"].Value),
            finishTime: @Json.Serialize(Localizer["Finish time"].Value),
            procedingTasks: @Json.Serialize(Localizer["Previous tasks"].Value),
            positive: @Json.Serialize(Localizer["Positive"].Value),
            average: @Json.Serialize(Localizer["Average"].Value),
            negative: @Json.Serialize(Localizer["Negative"].Value),
            emptyProceedingTaskField: @Json.Serialize(Localizer["Proceeding tasks field cannot be empty."].Value),

            // indexes for smaller screens
            numberIndex: @Json.Serialize(Localizer["numberIndex"].Value),
            nameIndex: @Json.Serialize(Localizer["nameIndex"].Value),
            finishTimeIndex: @Json.Serialize(Localizer["finishTimeIndex"].Value),
            previousTasksIndex: @Json.Serialize(Localizer["previousTasksIndex"].Value),
            positiveTimeIndex: @Json.Serialize(Localizer["positiveTimeIndex"].Value),
            averageTimeIndex: @Json.Serialize(Localizer["averageTimeIndex"].Value),
            negativeTimeIndex: @Json.Serialize(Localizer["negativeTimeIndex"].Value)
        }
    </script>
}
